{"version":3,"sources":["../../lib/server.js"],"names":["startHttpServer","_httpServer","listen","httpPort","__filename","name","request","response","_unifiedServer","parsedUrl","url","JSON","stringify","queryStringObject","query","path","pathname","trimmedPath","replace","method","toLowerCase","headers","decoder","stringDecoder","buffer","on","data","write","end","requestData","payload","_createResponse","namespace","chosenHandler","includes","asset","undefined","template","statusCode","contentType","console","log","setHeader","contentTypes","payloadString","writeHead","_showResponseInfos"],"mappings":"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","file":"server.js","sourcesContent":["/*\r\n * Sunucu işlemleri\r\n * @author Yunus Emre\r\n */\r\n\r\nimport { createServer as createHttpServer } from \"http\";\r\nimport { httpPort, templateGlobals } from \"./config\";\r\nimport { parse as parseUrl } from \"url\";\r\nimport { StringDecoder as stringDecoder } from \"string_decoder\";\r\nimport { debug, JSONtoObject, getNamespace } from \"./utils/common\";\r\nimport { fixStatusCode, fixContentType, fixPayload, contentTypes } from \"./utils/regulators\";\r\nimport { template } from \"./controllers/template\";\r\nimport { asset } from \"./controllers/asset\";\r\n\r\n/**\r\n * HTTP sunucusunu başlatır\r\n */\r\nexport function startHttpServer() {\r\n  _httpServer.listen(httpPort, () => {\r\n    debug(getNamespace(__filename, startHttpServer.name), \"succes\", `Sunucu ${httpPort} portundan dinleniyor.`);\r\n  });\r\n}\r\n\r\n/**\r\n * Http server sunucusu yapılandırması\r\n */\r\nconst _httpServer = createHttpServer((request, response) => {\r\n  _unifiedServer(request, response);\r\n});\r\n\r\n/**\r\n * Ortak sunucu yapılandırması\r\n */\r\nconst _unifiedServer = (request, response) => {\r\n  /**\r\n   * Url ayrıştırma işlemi (obje olarak alıyoruz)\r\n   * - *Örnek : `{... query: {}, pathname: \"/ornek\" ... }` şeklinde bir url classı*\r\n   */\r\n  const parsedUrl = parseUrl(request.url, true);\r\n  debug(getNamespace(__filename, _unifiedServer.name), \"verbose\", `Ayrıştırılmış url: '${JSON.stringify(parsedUrl)}'`);\r\n\r\n  /**\r\n   * Sorgu kelimesini (query string) obje olarak almak.\r\n   * - *Örnek: `curl localhost:3000/foo?test=testtir` => `{ test : \"testtir\" }`*\r\n   * - *Not : `?test=testtir` sorgu dizgisidir.*\r\n   */\r\n  const queryStringObject = parsedUrl.query;\r\n  debug(\r\n    getNamespace(__filename, _unifiedServer.name),\r\n    \"verbose\",\r\n    `Sorgu dizgileri: '${JSON.stringify(queryStringObject)}'`\r\n  );\r\n\r\n  /**\r\n   * Ayrıştırılan urldeki pathname değişkenindeki değeri yol'a alıyorz.\r\n   * - *Örnek: `curl localhost:3000/ornek/test/` => yolu `/ornek/test/`*\r\n   * - *Not: sorgu dizgileri ele alınmaz ( `curl localhost:3000/ornek?foo=bar` => yolu `/ornek` )*\r\n   */\r\n  const path = parsedUrl.pathname;\r\n  debug(getNamespace(__filename, _unifiedServer.name), \"verbose\", `Yol: '${path}'`);\r\n\r\n  /**\r\n   * Replace içinde verilen işaretler çıkartılarak alınan yol.\r\n   * - *Örnek: `/ornek` -> `ornek` veya `/ornek/test/` -> `ornek/test/` olarak kırpılmakta.*\r\n   * - *Not: Sadece **ilk karakter** kırpılıyor (?)*\r\n   */\r\n  const trimmedPath = path.replace(/^\\/+|\\+$/g, \"\");\r\n  debug(getNamespace(__filename, _unifiedServer.name), \"verbose\", `Kırpılmış Yol: '${trimmedPath}'`);\r\n\r\n  /**\r\n   * HTTP metodu alma\r\n   * - *Örnek: `GET`, `POST`, `PUT`, `DELETE` ...*\r\n   * - *Not: Küçük harfe çevirip alıyoruz.*\r\n   */\r\n  const method = request.method.toLowerCase();\r\n  debug(getNamespace(__filename, _unifiedServer.name), \"verbose\", `Method: '${method}'`);\r\n\r\n  /**\r\n   * İsteğin içindeki başlıkları (header keys) obje olarak almak.\r\n   * - *Not: Postman ile headers sekmesinde gönderilen anahtarları (keys)*\r\n   * *ve değerlerini (the value of them) içerir.*\r\n   */\r\n  const headers = request.headers;\r\n  debug(getNamespace(__filename, _unifiedServer.name), \"verbose\", `Başlıklar: '${headers}'`);\r\n\r\n  /**\r\n   * ASCI kodlarını çözümlemek için kod çözücü tanımlama\r\n   * - *Not: `utf-8` çözümleme yöntemidir*\r\n   */\r\n  const decoder = new stringDecoder(\"utf-8\");\r\n  let buffer = \"\"; // Yükleri kayıt edeceğimiz tamponu oluşturuyoruz.\r\n\r\n  /**\r\n   * İstekte veri geldiği anda yapılacak işlemler\r\n   */\r\n  request.on(\"data\", data => {\r\n    /**\r\n     * ASCI kodlarını \"utf-8\" formatında çözümlüyoruz.\r\n     * - *Ornek: 42 75 -> Bu [ 42 = B, 75 = u]*\r\n     */\r\n    buffer += decoder.write(data);\r\n  });\r\n\r\n  /**\r\n   * İstek sonlandığı anda yapılacak işlemler\r\n   */\r\n  request.on(\"end\", () => {\r\n    // Kod çözümlemeyi kapatıyoruz.\r\n    buffer += decoder.end();\r\n\r\n    /**\r\n     * İşleyiciye gönderilen veri objesi oluşturma\r\n     * - *Not: Her dosyada kullanılan veri objesidir.*\r\n     * - *Örnek:*\r\n     ```javascript\r\n     { \r\n        \"trimmedPath\" = \"ornek\" \r\n        \"queryStringObject\" = {}\r\n        \"method\" = \"post\"\r\n        \"headers\" = {\"isim\" : \"Yunus Emre\"}\r\n        \"payload\": JSONtoObject(buffer)\r\n     }\r\n     ```\r\n     */\r\n    const requestData = {\r\n      trimmedPath: trimmedPath,\r\n      queryStringObject: queryStringObject,\r\n      method: method,\r\n      headers: headers,\r\n      payload: JSONtoObject(buffer)\r\n    };\r\n    debug(getNamespace(__filename, _unifiedServer.name), \"succes\", `İstek verileri başarıyla oluşturuldu`);\r\n    // Yanıt oluşturma\r\n    _createResponse(requestData, response);\r\n  });\r\n};\r\n\r\n/**\r\n * Sunucu tarafından verilecek yanıtı oluşturma\r\n * @param {object} requestData İstek verileri\r\n * @param {string} response Yanıt dizgisi\r\n */\r\nconst _createResponse = (requestData, response) => {\r\n  const namespace = getNamespace(__filename, _createResponse.name);\r\n\r\n  /**\r\n   * Seçilmiş işleyiciyi ayarlama\r\n   * - `asset` Statik veriler: resim vs.\r\n   * - `api` Arka plan işlevleri\r\n   * - `template` Sayfa kalıpları: html\r\n   */\r\n  const chosenHandler = requestData.trimmedPath.includes(\".\")\r\n    ? asset // asset\r\n    : requestData.trimmedPath.includes(\"api/\")\r\n    ? undefined // api\r\n    : template;\r\n\r\n  debug(namespace, \"verbose\", `Seçilen işleyici: '${chosenHandler.name}'`);\r\n  chosenHandler(requestData, (statusCode, payload, contentType) => {\r\n    console.log(\"aa\");\r\n    // Değişkenleri düzenleme\r\n    statusCode = fixStatusCode(statusCode);\r\n    contentType = fixContentType(contentType);\r\n    debug(namespace, \"verbose\", `Durum Kodu: ${statusCode} İçerik Tipi: '${contentType}'`);\r\n\r\n    // Yanıt için başlıkları ayarlama\r\n    response.setHeader(\"Content-Type\", contentTypes[contentType]);\r\n    debug(namespace, \"verbose\", `'${contentType}' için başlıklar oluşturuldu`);\r\n\r\n    // Yük dizgisini ayarlama\r\n    const payloadString = fixPayload(contentType, payload);\r\n\r\n    // Yanıt için durum kodunu ve geri dönüş yüklerini ayarlama\r\n    response.writeHead(statusCode);\r\n    response.end(payloadString);\r\n\r\n    // Yanıt hakkında bilgi gösterme (debug)\r\n    _showResponseInfos(statusCode, requestData);\r\n  });\r\n};\r\n\r\n/**\r\n * Sunucu yanıtı hakkında bilgilendirme\r\n * @param {number} statusCode Sunucu durum kodu\r\n * @param {object} requestData Sunucuya gönderilen istek verisi\r\n */\r\nconst _showResponseInfos = (statusCode, requestData) => {\r\n  // İşlem yanıtı olumlu ise yeşil, değilse kırmızı yazma\r\n  debug(\r\n    getNamespace(__filename, _showResponseInfos.name),\r\n    statusCode == 200 ? \"succes\" : \"warn\",\r\n    `Method: '${requestData.method}' Path: '${requestData.trimmedPath}' Status: ${statusCode}`\r\n  );\r\n};\r\n"]}