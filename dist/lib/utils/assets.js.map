{"version":3,"sources":["../../../lib/utils/assets.js"],"names":["getStaticAsset","figureContentType","_publicDir","__dirname","assetPath","callback","namespace","__filename","name","fixString","readFile","err","data","debug","assetName","includes"],"mappings":";;;;;QAcgBA,c,GAAAA,c;QA+BAC,iB,GAAAA,iB;;AA7ChB;;AACA;;AAEA;;;AAGA,MAAMC,aAAa,gBAAKC,SAAL,EAAgB,gBAAhB,CAAnB;;AAEA;;;;;;AAMO,SAASH,cAAT,CAAwBI,SAAxB,EAAmCC,QAAnC,EAA6C;AAClD;AACA,QAAMC,YAAY,0BAAaC,UAAb,EAAyBP,eAAeQ,IAAxC,CAAlB;;AAEAJ,cAAYK,UAAUL,SAAV,CAAZ;AACA,MAAIA,SAAJ,EAAe;AACbM,aAASR,aAAaE,SAAtB,EAAiC,CAACO,GAAD,EAAMC,IAAN,KAAe;AAC9C,UAAI,CAACD,GAAL,EAAU;AACR,YAAIC,IAAJ,EAAU;AACRC,gBAAMP,SAAN,EAAiB,QAAjB,EAA4B,IAAGF,SAAU,4BAAzC;AACD,SAFD,MAEO;AACLS,gBAAMP,SAAN,EAAiB,MAAjB,EAA0B,IAAGF,SAAU,sBAAvC;AACD;;AAEDC,iBAASO,IAAT;AACD,OARD,MAQO;AACLC,cAAMP,SAAN,EAAiB,OAAjB,EAA2B,IAAGF,SAAU,6BAA4BO,GAAI,EAAxE;AACAN,iBAAS,KAAT;AACD;AACF,KAbD;AAcD,GAfD,MAeO;AACLQ,UAAMP,SAAN,EAAiB,OAAjB,EAA2B,IAAGF,SAAU,0BAAxC;AACAC,aAAS,KAAT;AACD;AACF;;AAED;;;;;AAKO,SAASJ,iBAAT,CAA2Ba,SAA3B,EAAsC;AAC3C,MAAIA,UAAUC,QAAV,CAAmB,MAAnB,CAAJ,EAAgC;AAC9B,WAAO,KAAP;AACD,GAFD,MAEO,IAAID,UAAUC,QAAV,CAAmB,MAAnB,CAAJ,EAAgC;AACrC,WAAO,KAAP;AACD,GAFM,MAEA,IAAID,UAAUC,QAAV,CAAmB,MAAnB,CAAJ,EAAgC;AACrC,WAAO,KAAP;AACD,GAFM,MAEA,IAAID,UAAUC,QAAV,CAAmB,MAAnB,CAAJ,EAAgC;AACrC,WAAO,SAAP;AACD,GAFM,MAEA,IAAID,UAAUC,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AACpC,WAAO,IAAP;AACD;AACD,SAAO,OAAP;AACD","file":"assets.js","sourcesContent":["import { join } from \"path\";\r\nimport { getNamespace } from \"./common\";\r\n\r\n/**\r\n * Public dizininin yolunu tanımalama\r\n */\r\nconst _publicDir = join(__dirname, \"/../../public/\");\r\n\r\n/**\r\n * Public dosyasındaki varlıkları alma\r\n * @param {stirng} assetPath İstenen varlığın yolu *err.jpg*\r\n * @param {function(boolean | string, string=):void} callback Geriçağırma\r\n * - *data: İstenilen varlık verisi yoksa `false`*\r\n */\r\nexport function getStaticAsset(assetPath, callback) {\r\n  // Debug ismi\r\n  const namespace = getNamespace(__filename, getStaticAsset.name);\r\n\r\n  assetPath = fixString(assetPath);\r\n  if (assetPath) {\r\n    readFile(_publicDir + assetPath, (err, data) => {\r\n      if (!err) {\r\n        if (data) {\r\n          debug(namespace, \"succes\", `'${assetPath}' varlığı başarıyla alındı`);\r\n        } else {\r\n          debug(namespace, \"warn\", `'${assetPath}' varlığının içi boş`);\r\n        }\r\n\r\n        callback(data);\r\n      } else {\r\n        debug(namespace, \"error\", `'${assetPath}' okunurken hata oluştu:\\n${err}`);\r\n        callback(false);\r\n      }\r\n    });\r\n  } else {\r\n    debug(namespace, \"error\", `'${assetPath}' geçerli bir yol değil.`);\r\n    callback(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Varlık isminin uzantısına göre içerik türüne karar verme\r\n * @param {string} assetName Varlık ismi\r\n * @return {string} Varlığın içerik türü\r\n */\r\nexport function figureContentType(assetName) {\r\n  if (assetName.includes(\".css\")) {\r\n    return \"css\";\r\n  } else if (assetName.includes(\".png\")) {\r\n    return \"png\";\r\n  } else if (assetName.includes(\".jpg\")) {\r\n    return \"jpg\";\r\n  } else if (assetName.includes(\".ico\")) {\r\n    return \"favicon\";\r\n  } else if (assetName.includes(\".js\")) {\r\n    return \"js\";\r\n  }\r\n  return \"plain\";\r\n}\r\n"]}