{"version":3,"sources":["../../../lib/utils/common.js"],"names":["JSONtoObject","debug","getNamespace","theme","succes","verbose","warn","error","default","colors","setTheme","str","JSON","parse","e","__filename","name","namespace","themeKey","msg","hasOwnProperty","filename","functionName","names","split","key","parseInt","Object","keys","find","i","length","replace"],"mappings":";;;;;QA4BgBA,Y,GAAAA,Y;QAeAC,K,GAAAA,K;QAYAC,Y,GAAAA,Y;;AAlDhB;;;;AACA;;;;AACA;;;;AAEA;;;AAGA,MAAMC,QAAQ;AACZC,UAAQ,OADI;AAEZC,WAAS,MAFG;AAGZC,QAAM,QAHM;AAIZC,SAAO,KAJK;AAKZC,WAAS;AALG,CAAd;;AAQA;AApBA;;;;;AAqBAC,iBAAOC,QAAP,CAAgBP,KAAhB;;AAEA;;;;;AAKO,SAASH,YAAT,CAAsBW,GAAtB,EAA2B;AAChC,MAAI;AACF,WAAOC,KAAKC,KAAL,CAAWF,GAAX,CAAP;AACD,GAFD,CAEE,OAAOG,CAAP,EAAU;AACVb,UAAMC,aAAaa,UAAb,EAAyBf,aAAagB,IAAtC,CAAN,EAAmD,MAAnD,EAA4D,UAASL,GAAI,0BAAzE;AACA,WAAO,EAAP;AACD;AACF;;AAED;;;;;;AAMO,SAASV,KAAT,CAAegB,SAAf,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyC;AAC9CD,aAAWf,MAAMiB,cAAN,CAAqBF,QAArB,IAAiCA,QAAjC,GAA4Cf,MAAMK,OAA7D;AACA,uBAASS,SAAT,EAAoBR,iBAAOS,QAAP,EAAkB,GAAEC,GAAI,EAAxB,CAApB;AACD;;AAED;;;;;;;AAOO,SAASjB,YAAT,CAAsBmB,QAAtB,EAAgCC,YAAhC,EAA8C;AACnD,QAAMC,QAAQF,SAASG,KAAT,CAAe,IAAf,CAAd;AACA,QAAMC,MAAMC,SAASC,OAAOC,IAAP,CAAYL,KAAZ,EAAmBM,IAAnB,CAAwBJ,OAAOF,MAAME,GAAN,MAAe,aAA9C,CAAT,CAAZ;;AAEA,MAAIR,YAAY,EAAhB;AACA,OAAK,IAAIa,IAAIL,MAAM,CAAnB,EAAsBK,IAAIP,MAAMQ,MAAhC,EAAwCD,GAAxC,EAA6C;AAC3Cb,iBAAaM,MAAMO,CAAN,KAAYA,KAAMP,MAAMQ,MAAN,GAAe,CAArB,GAA0B,IAA1B,GAAiC,GAA7C,CAAb;AACD;AACDd,cAAYA,UAAUe,OAAV,CAAkB,KAAlB,EAAyB,EAAzB,CAAZ;;AAEA,SAAOf,YAAYK,YAAnB;AACD","file":"common.js","sourcesContent":["/*\r\n * Sık kullanılan yardımcı metodlar\r\n * @auther Yunus Emre\r\n */\r\n\r\nimport colors from \"colors\";\r\nimport debugLog from \"debug\";\r\nimport { projectName } from \"./../config\";\r\n\r\n/**\r\n * Renk teması\r\n */\r\nconst theme = {\r\n  succes: \"green\",\r\n  verbose: \"grey\",\r\n  warn: \"yellow\",\r\n  error: \"red\",\r\n  default: \"warn\"\r\n};\r\n\r\n// Temayı ayarlama\r\ncolors.setTheme(theme);\r\n\r\n/**\r\n * Json'u objeye dönüştürme (parsing)\r\n * @param {string} str Dönüştürülecek json verisi\r\n * @return {JSON} JSON objesi veya boş obje\r\n */\r\nexport function JSONtoObject(str) {\r\n  try {\r\n    return JSON.parse(str);\r\n  } catch (e) {\r\n    debug(getNamespace(__filename, JSONtoObject.name), \"warn\", `JSON: '${str}' objeye dönüştürülemedi`);\r\n    return {};\r\n  }\r\n}\r\n\r\n/**\r\n * Hata ayıklama modunda consola yazdırma\r\n * @param {string} namespace Hata ayıklayıcı adı `file:func`\r\n * @param {string} themeKey common.theme anahtarı\r\n * @param {string} msg Mesaj\r\n */\r\nexport function debug(namespace, themeKey, msg) {\r\n  themeKey = theme.hasOwnProperty(themeKey) ? themeKey : theme.default;\r\n  debugLog(namespace)(colors[themeKey](`${msg}`));\r\n}\r\n\r\n/**\r\n * İsim alanını oluşturma\r\n * - *Not: Debug gibi fonksyionlarda kullanılılır.*\r\n * @param {string} filename `__filename`\r\n * @param {string} functionName Fonksiyon ismi\r\n * @return {string} İsim alanı `file:func`\r\n */\r\nexport function getNamespace(filename, functionName) {\r\n  const names = filename.split(\"\\\\\");\r\n  const key = parseInt(Object.keys(names).find(key => names[key] === \"yemreak.com\"));\r\n  \r\n  let namespace = \"\";\r\n  for (let i = key + 1; i < names.length; i++) {\r\n    namespace += names[i] + (i != (names.length - 1) ? \"\\\\\" : \".\");\r\n  }\r\n  namespace = namespace.replace(\".js\", \"\");\r\n\r\n  return namespace + functionName;\r\n}"]}