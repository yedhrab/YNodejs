{"version":3,"sources":["../../../lib/utils/templates.js"],"names":["getFullTemplate","getMarkdownTemplate","getNotFoundPage","getTemplate","getPublicAsset","getTemplatePath","_publicDir","__dirname","templateDir","callback","namespace","__filename","name","templatePath","templateString","_addUniversalTemplates","fullTemplateString","_interpolateKeys","formattedString","err","parsedResult","assetPath","data","templates","headerString","footerString","string","keysData","key","templateGlobals","hasOwnProperty","replace","ext","defaultTemplateExt","split","length"],"mappings":"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","file":"templates.js","sourcesContent":["/*\r\n * Sayfa kalıbı metodları\r\n * @author Yunus Emre\r\n */\r\n\r\nimport { join } from \"path\";\r\nimport { fixString } from \"./regulators\";\r\nimport { readFile } from \"fs\";\r\nimport { debug, getNamespace } from \"./common\";\r\nimport { defaultTemplateExt, templates, templateGlobals } from \"../config\";\r\nimport marked from \"marked\";\r\n\r\n/**\r\n * Public dizininin yolunu tanımalama\r\n */\r\nconst _publicDir = join(__dirname, \"/../../public/\");\r\n\r\n/**\r\n * Sayfa kalıbının dizgisine anahtar verilerini ve header - footer verilerini iliştirir\r\n * @param {string} templateDir Kalıbın dizini (url deki localhost'suz yol)\r\n * @param {function(boolean | string)} callback İşlemler bittiği zaman geri çağırılan metot\r\n * - *arg0: Kalıb dizgisi yoksa `false`*\r\n */\r\nexport function getFullTemplate(templateDir, callback) {\r\n  // Debug metni\r\n  const namespace = getNamespace(__filename, getFullTemplate.name);\r\n\r\n  templateDir = fixString(templateDir);\r\n  if (templateDir) {\r\n    const templatePath = getTemplatePath(templateDir);\r\n\r\n    getPublicAsset(templatePath, templateString => {\r\n      if (templateString) {\r\n        debug(namespace, \"verbose\", `'${templateDir}' için içerik alındı`);\r\n        _addUniversalTemplates(templateString, fullTemplateString => {\r\n          if (fullTemplateString) {\r\n            debug(namespace, \"verbose\", `'${templateDir}' için tüm kalıp alındı`);\r\n\r\n            _interpolateKeys(fullTemplateString, formattedString => {\r\n              debug(namespace, \"verbose\", `'${templateDir}' için anahtar kelimeler yerleştirildi`);\r\n\r\n              callback(formattedString);\r\n            });\r\n          } else {\r\n            debug(namespace, \"error\", `Tüm sayfa kalıbı '${templatePath}' için oluşturulamadı ya da boş`);\r\n            callback(false);\r\n          }\r\n        });\r\n      } else {\r\n        debug(namespace, \"error\", `'${templatePath}' için tüm kalıp alınamadı`);\r\n        callback(false);\r\n      }\r\n    });\r\n  } else {\r\n    debug(namespace, \"error\", `'${templateDir}' olan tüm kalıp dizini geçersiz`);\r\n    callback(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Sayfa kalıbını markdown üzerinden oluşturur ve anahtar verilerini ve header - footer verilerini iliştirir\r\n * @param {string} templateDir Kalıbın dizini (url deki localhost'suz yol)\r\n * @param {function(boolean | string)} callback İşlemler bittiği zaman geri çağırılan metot\r\n * - *arg0: Kalıb dizgisi yoksa `false`*\r\n */\r\nexport function getMarkdownTemplate(templateDir, callback) {\r\n  // Debug metni\r\n  const namespace = getNamespace(__filename, getMarkdownTemplate.name);\r\n\r\n  templateDir = fixString(templateDir);\r\n  if (templateDir) {\r\n    const templatePath = getTemplatePath(templateDir, \"md\");\r\n\r\n    getPublicAsset(templatePath, templateString => {\r\n      if (templateString) {\r\n        marked(templateString, (err, parsedResult) => {\r\n          debug(namespace, \"verbose\", `'${templatePath}' için içerik alındı`);\r\n          _addUniversalTemplates(parsedResult, fullTemplateString => {\r\n            if (fullTemplateString) {\r\n              debug(namespace, \"verbose\", `'${templatePath}' için tüm kalıp alındı`);\r\n\r\n              _interpolateKeys(fullTemplateString, formattedString => {\r\n                debug(namespace, \"verbose\", `'${templatePath}' için anahtar kelimeler yerleştirildi`);\r\n\r\n                callback(formattedString);\r\n              });\r\n            } else {\r\n              debug(namespace, \"error\", `Tüm sayfa kalıbı '${templatePath}' için oluşturulamadı ya da boş`);\r\n              callback(false);\r\n            }\r\n          });\r\n        });\r\n      } else {\r\n        debug(namespace, \"error\", `'${templatePath}' için tüm kalıp alınamadı`);\r\n        callback(false);\r\n      }\r\n    });\r\n  } else {\r\n    debug(namespace, \"error\", `'${templateDir}' olan tüm kalıp dizini geçersiz`);\r\n    callback(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Sayfa bulunamadı ekranını açar\r\n */\r\nexport function getNotFoundPage(callback) {\r\n  // Debug metni\r\n  const namespace = getNamespace(__filename, getNotFoundPage.name);\r\n\r\n  getTemplate(\"notFound\", templateString => {\r\n    if (templateString) {\r\n      debug(namespace, \"succes\", `'${templateDir}' için sayfa bulunamadı açıldı`);\r\n      callback(200, templateString, \"html\");\r\n    } else {\r\n      debug(namespace, \"error\", `'${templateDir}' için sayfa bulunamadı bulunamadı`);\r\n      callback(500, `${__filename}.template hatası!`, \"json\");\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Sayfa kalıbının digisine anahtar verilerini verilerini iliştirir\r\n * @param {string} templateDir Kalıbın dizini\r\n * @param {function(boolean | string)} callback İşlemler bittiği zaman geri çağırılan metot\r\n * - *arg1: Kalıb dizgisi yoksa `false`*\r\n */\r\nexport function getTemplate(templateDir, callback) {\r\n  // Debug metni\r\n  const namespace = getNamespace(__filename, getTemplate.name);\r\n\r\n  templateDir = fixString(templateDir);\r\n  if (templateDir) {\r\n    const templatePath = getTemplatePath(templateDir);\r\n    getPublicAsset(templatePath, templateString => {\r\n      if (templateString) {\r\n        _interpolateKeys(templateString, formattedString => {\r\n          debug(namespace, \"verbose\", `'${templateDir}' için anahtar kelimeler yerleştirildi`);\r\n          callback(formattedString);\r\n        });\r\n      } else {\r\n        debug(namespace, \"error\", `'${templateDir}' için kalıp alınamadı`);\r\n        callback(false);\r\n      }\r\n    });\r\n  } else {\r\n    debug(namespace, \"error\", `'${templateDir}' için dizin geçerli değil`);\r\n    callback(false);\r\n  }\r\n}\r\n\r\n/**\r\n * Public dosyasındaki varlıkları alma\r\n * @param {stirng} assetPath İstenen varlığın yolu\r\n * @param {function(boolean | string):void} callback Geriçağırma\r\n * - *data: İstenilen varlık verisi yoksa `false`*\r\n */\r\nexport function getPublicAsset(assetPath, callback) {\r\n  // Debug metni\r\n  const namespace = getNamespace(__filename, getPublicAsset.name);\r\n\r\n  assetPath = fixString(assetPath);\r\n  if (assetPath) {\r\n    readFile(_publicDir + assetPath, \"utf8\", (err, data) => {\r\n      if (!err) {\r\n        if (data) {\r\n          debug(namespace, \"succes\", `'${assetPath}' başarıyla okundu`);\r\n        } else {\r\n          debug(namespace, \"warn\", `'${assetPath}' içinde veri bulunmamakta`);\r\n        }\r\n        callback(data);\r\n      } else {\r\n        debug(namespace, \"error\", `'${assetPath}' okunurken hata oluştu:\\n${err}`);\r\n        callback(false);\r\n      }\r\n    });\r\n  } else {\r\n    debug(namespace, \"error\", `'${assetPath}' geçerli bir yol değil.`);\r\n    callback(false);\r\n  }\r\n}\r\n\r\n/**\r\n * GUI için gereken kalıp kalıbına alt ve üst bilgi kalıbını ekler\r\n * @param {string} templateString Evrensel kalıpların ekleneceği kalıp dizgisi\r\n * @param {function (string | boolean): void} callback İşlemler bittiği zaman verilen yanıt\r\n * - *arg0: Evrensel kalıpların eklendiği kalıp dizgisi*\r\n */\r\nconst _addUniversalTemplates = (templateString, callback) => {\r\n  // Debug metni\r\n  const namespace = getNamespace(__filename, _addUniversalTemplates.name);\r\n\r\n  templateString = fixString(templateString, true);\r\n\r\n  getPublicAsset(templates[\"header\"], headerString => {\r\n    if (headerString) {\r\n      debug(namespace, \"verbose\", `Üst bilgi kalıbı bulundu`);\r\n      getPublicAsset(templates[\"footer\"], footerString => {\r\n        if (footerString) {\r\n          debug(namespace, \"verbose\", `Alt bilgi kalıbı bulundu`);\r\n          callback(headerString + templateString + footerString);\r\n        } else {\r\n          debug(namespace, \"error\", `Alt bilgi kalıbı bulunamadı`);\r\n          callback(false);\r\n        }\r\n      });\r\n    } else {\r\n      debug(namespace, \"error\", `Üst bilgi kalıbı bulunamadı`);\r\n      callback(false);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Verilen metni anahtar verilerine göre yeniden düzenler\r\n * @param {string} string Formatlanacak dizgi\r\n * @param {function(string)} callback İşlemler bittiğinde çalışan fonksiyon\r\n * - *args0: İşlenmiş string*\r\n */\r\nconst _interpolateKeys = (string, callback) => {\r\n  // Anahtar verileri değişkeni\r\n  const keysData = {};\r\n\r\n  // Anahtar verilerini oluşturma\r\n  for (let key in templateGlobals) {\r\n    if (templateGlobals.hasOwnProperty(key)) {\r\n      keysData[`globals.${key}`] = templateGlobals[key];\r\n    }\r\n  }\r\n\r\n  // Her bir anahtar verisini, aldığımız kalıp dizgisinde uygun yerlere koyuyoruz\r\n  for (let key in keysData) {\r\n    if (keysData.hasOwnProperty(key) && keysData[key] == \"string\") {\r\n      string = string.replace(`{${key}}`, keysData[key]);\r\n    }\r\n  }\r\n\r\n  callback(string);\r\n};\r\n\r\n/**\r\n * Kalıp dizininden kalıp yolunu uzantısız alır\r\n * - *Örn: 'index\\index.html' veya 'index\\index'*\r\n * @param {string} templateDir Kalıp dizini\r\n * @param {?string} ext Uzantısı (yoksa `null`)\r\n * @return {string} Kalıp yolu\r\n */\r\nexport function getTemplatePath(templateDir, ext = defaultTemplateExt) {\r\n  ext = ext ? `.${ext}` : \"\";\r\n  const split = templateDir.split(\"/\");\r\n  return templateDir + \"/\" + split[split.length - 1] + ext;\r\n}\r\n"]}